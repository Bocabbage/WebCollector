# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_utils.mongodb_crud_pb2 as mongodb__crud__pb2


class MikananiMongoCrudStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryAnime = channel.unary_unary(
                '/mikanani_grpc_utils.MikananiMongoCrud/QueryAnime',
                request_serializer=mongodb__crud__pb2.QueryAnimeRequest.SerializeToString,
                response_deserializer=mongodb__crud__pb2.QueryAnimeResponse.FromString,
                )
        self.UpdateAnime = channel.unary_unary(
                '/mikanani_grpc_utils.MikananiMongoCrud/UpdateAnime',
                request_serializer=mongodb__crud__pb2.UpdateAnimeRequest.SerializeToString,
                response_deserializer=mongodb__crud__pb2.UpdateAnimeResponse.FromString,
                )
        self.DelAnime = channel.unary_unary(
                '/mikanani_grpc_utils.MikananiMongoCrud/DelAnime',
                request_serializer=mongodb__crud__pb2.DelAnimeRequest.SerializeToString,
                response_deserializer=mongodb__crud__pb2.DelAnimeResponse.FromString,
                )


class MikananiMongoCrudServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryAnime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAnime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelAnime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MikananiMongoCrudServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryAnime': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAnime,
                    request_deserializer=mongodb__crud__pb2.QueryAnimeRequest.FromString,
                    response_serializer=mongodb__crud__pb2.QueryAnimeResponse.SerializeToString,
            ),
            'UpdateAnime': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAnime,
                    request_deserializer=mongodb__crud__pb2.UpdateAnimeRequest.FromString,
                    response_serializer=mongodb__crud__pb2.UpdateAnimeResponse.SerializeToString,
            ),
            'DelAnime': grpc.unary_unary_rpc_method_handler(
                    servicer.DelAnime,
                    request_deserializer=mongodb__crud__pb2.DelAnimeRequest.FromString,
                    response_serializer=mongodb__crud__pb2.DelAnimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mikanani_grpc_utils.MikananiMongoCrud', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MikananiMongoCrud(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryAnime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mikanani_grpc_utils.MikananiMongoCrud/QueryAnime',
            mongodb__crud__pb2.QueryAnimeRequest.SerializeToString,
            mongodb__crud__pb2.QueryAnimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAnime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mikanani_grpc_utils.MikananiMongoCrud/UpdateAnime',
            mongodb__crud__pb2.UpdateAnimeRequest.SerializeToString,
            mongodb__crud__pb2.UpdateAnimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelAnime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mikanani_grpc_utils.MikananiMongoCrud/DelAnime',
            mongodb__crud__pb2.DelAnimeRequest.SerializeToString,
            mongodb__crud__pb2.DelAnimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
