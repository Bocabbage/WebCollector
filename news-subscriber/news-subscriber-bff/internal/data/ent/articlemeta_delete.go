// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"news-subscriber-bff/internal/data/ent/articlemeta"
	"news-subscriber-bff/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleMetaDelete is the builder for deleting a ArticleMeta entity.
type ArticleMetaDelete struct {
	config
	hooks    []Hook
	mutation *ArticleMetaMutation
}

// Where appends a list predicates to the ArticleMetaDelete builder.
func (amd *ArticleMetaDelete) Where(ps ...predicate.ArticleMeta) *ArticleMetaDelete {
	amd.mutation.Where(ps...)
	return amd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (amd *ArticleMetaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, amd.sqlExec, amd.mutation, amd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (amd *ArticleMetaDelete) ExecX(ctx context.Context) int {
	n, err := amd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (amd *ArticleMetaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(articlemeta.Table, sqlgraph.NewFieldSpec(articlemeta.FieldID, field.TypeInt))
	if ps := amd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, amd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	amd.mutation.done = true
	return affected, err
}

// ArticleMetaDeleteOne is the builder for deleting a single ArticleMeta entity.
type ArticleMetaDeleteOne struct {
	amd *ArticleMetaDelete
}

// Where appends a list predicates to the ArticleMetaDelete builder.
func (amdo *ArticleMetaDeleteOne) Where(ps ...predicate.ArticleMeta) *ArticleMetaDeleteOne {
	amdo.amd.mutation.Where(ps...)
	return amdo
}

// Exec executes the deletion query.
func (amdo *ArticleMetaDeleteOne) Exec(ctx context.Context) error {
	n, err := amdo.amd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{articlemeta.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (amdo *ArticleMetaDeleteOne) ExecX(ctx context.Context) {
	if err := amdo.Exec(ctx); err != nil {
		panic(err)
	}
}
