// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: mikanani/v2/anime.proto

package mikanani

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MikananiService_ListAnimeMeta_FullMethodName          = "/mikanani.MikananiService/ListAnimeMeta"
	MikananiService_GetAnimeDoc_FullMethodName            = "/mikanani.MikananiService/GetAnimeDoc"
	MikananiService_UpdateAnimeDoc_FullMethodName         = "/mikanani.MikananiService/UpdateAnimeDoc"
	MikananiService_UpdateAnimeMeta_FullMethodName        = "/mikanani.MikananiService/UpdateAnimeMeta"
	MikananiService_InsertAnimeItem_FullMethodName        = "/mikanani.MikananiService/InsertAnimeItem"
	MikananiService_DeleteAnimeItem_FullMethodName        = "/mikanani.MikananiService/DeleteAnimeItem"
	MikananiService_DispatchDownloadTask_FullMethodName   = "/mikanani.MikananiService/DispatchDownloadTask"
	MikananiService_GetAnimeCount_FullMethodName          = "/mikanani.MikananiService/GetAnimeCount"
	MikananiService_GetRecentUpdateList_FullMethodName    = "/mikanani.MikananiService/GetRecentUpdateList"
	MikananiService_DeleteRecentUpdateById_FullMethodName = "/mikanani.MikananiService/DeleteRecentUpdateById"
)

// MikananiServiceClient is the client API for MikananiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MikananiServiceClient interface {
	ListAnimeMeta(ctx context.Context, in *ListAnimeMetaRequest, opts ...grpc.CallOption) (*ListAnimeMetaResponse, error)
	GetAnimeDoc(ctx context.Context, in *GetAnimeDocRequest, opts ...grpc.CallOption) (*GetAnimeDocResponse, error)
	UpdateAnimeDoc(ctx context.Context, in *UpdateAnimeDocRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAnimeMeta(ctx context.Context, in *UpdateAnimeMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InsertAnimeItem(ctx context.Context, in *InsertAnimeItemRequest, opts ...grpc.CallOption) (*InsertAnimeItemResponse, error)
	DeleteAnimeItem(ctx context.Context, in *DeleteAnimeItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DispatchDownloadTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAnimeCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAnimeCountResponse, error)
	GetRecentUpdateList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRecentUpdateListResponse, error)
	DeleteRecentUpdateById(ctx context.Context, in *DelRecentUpdateByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mikananiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMikananiServiceClient(cc grpc.ClientConnInterface) MikananiServiceClient {
	return &mikananiServiceClient{cc}
}

func (c *mikananiServiceClient) ListAnimeMeta(ctx context.Context, in *ListAnimeMetaRequest, opts ...grpc.CallOption) (*ListAnimeMetaResponse, error) {
	out := new(ListAnimeMetaResponse)
	err := c.cc.Invoke(ctx, MikananiService_ListAnimeMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) GetAnimeDoc(ctx context.Context, in *GetAnimeDocRequest, opts ...grpc.CallOption) (*GetAnimeDocResponse, error) {
	out := new(GetAnimeDocResponse)
	err := c.cc.Invoke(ctx, MikananiService_GetAnimeDoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) UpdateAnimeDoc(ctx context.Context, in *UpdateAnimeDocRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MikananiService_UpdateAnimeDoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) UpdateAnimeMeta(ctx context.Context, in *UpdateAnimeMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MikananiService_UpdateAnimeMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) InsertAnimeItem(ctx context.Context, in *InsertAnimeItemRequest, opts ...grpc.CallOption) (*InsertAnimeItemResponse, error) {
	out := new(InsertAnimeItemResponse)
	err := c.cc.Invoke(ctx, MikananiService_InsertAnimeItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) DeleteAnimeItem(ctx context.Context, in *DeleteAnimeItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MikananiService_DeleteAnimeItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) DispatchDownloadTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MikananiService_DispatchDownloadTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) GetAnimeCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAnimeCountResponse, error) {
	out := new(GetAnimeCountResponse)
	err := c.cc.Invoke(ctx, MikananiService_GetAnimeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) GetRecentUpdateList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRecentUpdateListResponse, error) {
	out := new(GetRecentUpdateListResponse)
	err := c.cc.Invoke(ctx, MikananiService_GetRecentUpdateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mikananiServiceClient) DeleteRecentUpdateById(ctx context.Context, in *DelRecentUpdateByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MikananiService_DeleteRecentUpdateById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MikananiServiceServer is the server API for MikananiService service.
// All implementations must embed UnimplementedMikananiServiceServer
// for forward compatibility
type MikananiServiceServer interface {
	ListAnimeMeta(context.Context, *ListAnimeMetaRequest) (*ListAnimeMetaResponse, error)
	GetAnimeDoc(context.Context, *GetAnimeDocRequest) (*GetAnimeDocResponse, error)
	UpdateAnimeDoc(context.Context, *UpdateAnimeDocRequest) (*emptypb.Empty, error)
	UpdateAnimeMeta(context.Context, *UpdateAnimeMetaRequest) (*emptypb.Empty, error)
	InsertAnimeItem(context.Context, *InsertAnimeItemRequest) (*InsertAnimeItemResponse, error)
	DeleteAnimeItem(context.Context, *DeleteAnimeItemRequest) (*emptypb.Empty, error)
	DispatchDownloadTask(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetAnimeCount(context.Context, *emptypb.Empty) (*GetAnimeCountResponse, error)
	GetRecentUpdateList(context.Context, *emptypb.Empty) (*GetRecentUpdateListResponse, error)
	DeleteRecentUpdateById(context.Context, *DelRecentUpdateByIdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMikananiServiceServer()
}

// UnimplementedMikananiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMikananiServiceServer struct {
}

func (UnimplementedMikananiServiceServer) ListAnimeMeta(context.Context, *ListAnimeMetaRequest) (*ListAnimeMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnimeMeta not implemented")
}
func (UnimplementedMikananiServiceServer) GetAnimeDoc(context.Context, *GetAnimeDocRequest) (*GetAnimeDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeDoc not implemented")
}
func (UnimplementedMikananiServiceServer) UpdateAnimeDoc(context.Context, *UpdateAnimeDocRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeDoc not implemented")
}
func (UnimplementedMikananiServiceServer) UpdateAnimeMeta(context.Context, *UpdateAnimeMetaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeMeta not implemented")
}
func (UnimplementedMikananiServiceServer) InsertAnimeItem(context.Context, *InsertAnimeItemRequest) (*InsertAnimeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAnimeItem not implemented")
}
func (UnimplementedMikananiServiceServer) DeleteAnimeItem(context.Context, *DeleteAnimeItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnimeItem not implemented")
}
func (UnimplementedMikananiServiceServer) DispatchDownloadTask(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchDownloadTask not implemented")
}
func (UnimplementedMikananiServiceServer) GetAnimeCount(context.Context, *emptypb.Empty) (*GetAnimeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeCount not implemented")
}
func (UnimplementedMikananiServiceServer) GetRecentUpdateList(context.Context, *emptypb.Empty) (*GetRecentUpdateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentUpdateList not implemented")
}
func (UnimplementedMikananiServiceServer) DeleteRecentUpdateById(context.Context, *DelRecentUpdateByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecentUpdateById not implemented")
}
func (UnimplementedMikananiServiceServer) mustEmbedUnimplementedMikananiServiceServer() {}

// UnsafeMikananiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MikananiServiceServer will
// result in compilation errors.
type UnsafeMikananiServiceServer interface {
	mustEmbedUnimplementedMikananiServiceServer()
}

func RegisterMikananiServiceServer(s grpc.ServiceRegistrar, srv MikananiServiceServer) {
	s.RegisterService(&MikananiService_ServiceDesc, srv)
}

func _MikananiService_ListAnimeMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnimeMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).ListAnimeMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_ListAnimeMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).ListAnimeMeta(ctx, req.(*ListAnimeMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_GetAnimeDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimeDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).GetAnimeDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_GetAnimeDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).GetAnimeDoc(ctx, req.(*GetAnimeDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_UpdateAnimeDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).UpdateAnimeDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_UpdateAnimeDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).UpdateAnimeDoc(ctx, req.(*UpdateAnimeDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_UpdateAnimeMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).UpdateAnimeMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_UpdateAnimeMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).UpdateAnimeMeta(ctx, req.(*UpdateAnimeMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_InsertAnimeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAnimeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).InsertAnimeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_InsertAnimeItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).InsertAnimeItem(ctx, req.(*InsertAnimeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_DeleteAnimeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnimeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).DeleteAnimeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_DeleteAnimeItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).DeleteAnimeItem(ctx, req.(*DeleteAnimeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_DispatchDownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).DispatchDownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_DispatchDownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).DispatchDownloadTask(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_GetAnimeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).GetAnimeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_GetAnimeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).GetAnimeCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_GetRecentUpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).GetRecentUpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_GetRecentUpdateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).GetRecentUpdateList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MikananiService_DeleteRecentUpdateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRecentUpdateByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MikananiServiceServer).DeleteRecentUpdateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MikananiService_DeleteRecentUpdateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MikananiServiceServer).DeleteRecentUpdateById(ctx, req.(*DelRecentUpdateByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MikananiService_ServiceDesc is the grpc.ServiceDesc for MikananiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MikananiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mikanani.MikananiService",
	HandlerType: (*MikananiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAnimeMeta",
			Handler:    _MikananiService_ListAnimeMeta_Handler,
		},
		{
			MethodName: "GetAnimeDoc",
			Handler:    _MikananiService_GetAnimeDoc_Handler,
		},
		{
			MethodName: "UpdateAnimeDoc",
			Handler:    _MikananiService_UpdateAnimeDoc_Handler,
		},
		{
			MethodName: "UpdateAnimeMeta",
			Handler:    _MikananiService_UpdateAnimeMeta_Handler,
		},
		{
			MethodName: "InsertAnimeItem",
			Handler:    _MikananiService_InsertAnimeItem_Handler,
		},
		{
			MethodName: "DeleteAnimeItem",
			Handler:    _MikananiService_DeleteAnimeItem_Handler,
		},
		{
			MethodName: "DispatchDownloadTask",
			Handler:    _MikananiService_DispatchDownloadTask_Handler,
		},
		{
			MethodName: "GetAnimeCount",
			Handler:    _MikananiService_GetAnimeCount_Handler,
		},
		{
			MethodName: "GetRecentUpdateList",
			Handler:    _MikananiService_GetRecentUpdateList_Handler,
		},
		{
			MethodName: "DeleteRecentUpdateById",
			Handler:    _MikananiService_DeleteRecentUpdateById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mikanani/v2/anime.proto",
}
