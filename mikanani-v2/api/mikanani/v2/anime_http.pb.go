// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.20.3
// source: mikanani/v2/anime.proto

package mikanani

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMikananiServiceDeleteAnimeItem = "/mikanani.MikananiService/DeleteAnimeItem"
const OperationMikananiServiceDispatchDownloadTask = "/mikanani.MikananiService/DispatchDownloadTask"
const OperationMikananiServiceGetAnimeCount = "/mikanani.MikananiService/GetAnimeCount"
const OperationMikananiServiceGetAnimeDoc = "/mikanani.MikananiService/GetAnimeDoc"
const OperationMikananiServiceInsertAnimeItem = "/mikanani.MikananiService/InsertAnimeItem"
const OperationMikananiServiceListAnimeMeta = "/mikanani.MikananiService/ListAnimeMeta"
const OperationMikananiServiceUpdateAnimeDoc = "/mikanani.MikananiService/UpdateAnimeDoc"
const OperationMikananiServiceUpdateAnimeMeta = "/mikanani.MikananiService/UpdateAnimeMeta"

type MikananiServiceHTTPServer interface {
	DeleteAnimeItem(context.Context, *DeleteAnimeItemRequest) (*emptypb.Empty, error)
	DispatchDownloadTask(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetAnimeCount(context.Context, *emptypb.Empty) (*GetAnimeCountResponse, error)
	GetAnimeDoc(context.Context, *GetAnimeDocRequest) (*GetAnimeDocResponse, error)
	InsertAnimeItem(context.Context, *InsertAnimeItemRequest) (*InsertAnimeItemResponse, error)
	ListAnimeMeta(context.Context, *ListAnimeMetaRequest) (*ListAnimeMetaResponse, error)
	UpdateAnimeDoc(context.Context, *UpdateAnimeDocRequest) (*emptypb.Empty, error)
	UpdateAnimeMeta(context.Context, *UpdateAnimeMetaRequest) (*emptypb.Empty, error)
}

func RegisterMikananiServiceHTTPServer(s *http.Server, srv MikananiServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/mikanani/v2/anime/list-meta", _MikananiService_ListAnimeMeta0_HTTP_Handler(srv))
	r.GET("/mikanani/v2/anime/doc/{uid}", _MikananiService_GetAnimeDoc0_HTTP_Handler(srv))
	r.PUT("/mikanani/v2/anime/update-doc", _MikananiService_UpdateAnimeDoc0_HTTP_Handler(srv))
	r.PUT("/mikanani/v2/anime/update-meta", _MikananiService_UpdateAnimeMeta0_HTTP_Handler(srv))
	r.POST("/mikanani/v2/anime/insert", _MikananiService_InsertAnimeItem0_HTTP_Handler(srv))
	r.DELETE("/mikanani/v2/anime/delete/{uid}", _MikananiService_DeleteAnimeItem0_HTTP_Handler(srv))
	r.POST("/mikanani/v2/anime/dispatch-download", _MikananiService_DispatchDownloadTask0_HTTP_Handler(srv))
	r.GET("/mikanani/v2/anime/anime-count", _MikananiService_GetAnimeCount0_HTTP_Handler(srv))
}

func _MikananiService_ListAnimeMeta0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAnimeMetaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceListAnimeMeta)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAnimeMeta(ctx, req.(*ListAnimeMetaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAnimeMetaResponse)
		return ctx.Result(200, reply)
	}
}

func _MikananiService_GetAnimeDoc0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAnimeDocRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceGetAnimeDoc)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAnimeDoc(ctx, req.(*GetAnimeDocRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAnimeDocResponse)
		return ctx.Result(200, reply)
	}
}

func _MikananiService_UpdateAnimeDoc0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAnimeDocRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceUpdateAnimeDoc)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAnimeDoc(ctx, req.(*UpdateAnimeDocRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MikananiService_UpdateAnimeMeta0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAnimeMetaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceUpdateAnimeMeta)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAnimeMeta(ctx, req.(*UpdateAnimeMetaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MikananiService_InsertAnimeItem0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsertAnimeItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceInsertAnimeItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertAnimeItem(ctx, req.(*InsertAnimeItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InsertAnimeItemResponse)
		return ctx.Result(200, reply)
	}
}

func _MikananiService_DeleteAnimeItem0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAnimeItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceDeleteAnimeItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAnimeItem(ctx, req.(*DeleteAnimeItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MikananiService_DispatchDownloadTask0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceDispatchDownloadTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DispatchDownloadTask(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MikananiService_GetAnimeCount0_HTTP_Handler(srv MikananiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMikananiServiceGetAnimeCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAnimeCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAnimeCountResponse)
		return ctx.Result(200, reply)
	}
}

type MikananiServiceHTTPClient interface {
	DeleteAnimeItem(ctx context.Context, req *DeleteAnimeItemRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DispatchDownloadTask(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAnimeCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetAnimeCountResponse, err error)
	GetAnimeDoc(ctx context.Context, req *GetAnimeDocRequest, opts ...http.CallOption) (rsp *GetAnimeDocResponse, err error)
	InsertAnimeItem(ctx context.Context, req *InsertAnimeItemRequest, opts ...http.CallOption) (rsp *InsertAnimeItemResponse, err error)
	ListAnimeMeta(ctx context.Context, req *ListAnimeMetaRequest, opts ...http.CallOption) (rsp *ListAnimeMetaResponse, err error)
	UpdateAnimeDoc(ctx context.Context, req *UpdateAnimeDocRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateAnimeMeta(ctx context.Context, req *UpdateAnimeMetaRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type MikananiServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMikananiServiceHTTPClient(client *http.Client) MikananiServiceHTTPClient {
	return &MikananiServiceHTTPClientImpl{client}
}

func (c *MikananiServiceHTTPClientImpl) DeleteAnimeItem(ctx context.Context, in *DeleteAnimeItemRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/mikanani/v2/anime/delete/{uid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMikananiServiceDeleteAnimeItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MikananiServiceHTTPClientImpl) DispatchDownloadTask(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/mikanani/v2/anime/dispatch-download"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMikananiServiceDispatchDownloadTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MikananiServiceHTTPClientImpl) GetAnimeCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetAnimeCountResponse, error) {
	var out GetAnimeCountResponse
	pattern := "/mikanani/v2/anime/anime-count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMikananiServiceGetAnimeCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MikananiServiceHTTPClientImpl) GetAnimeDoc(ctx context.Context, in *GetAnimeDocRequest, opts ...http.CallOption) (*GetAnimeDocResponse, error) {
	var out GetAnimeDocResponse
	pattern := "/mikanani/v2/anime/doc/{uid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMikananiServiceGetAnimeDoc))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MikananiServiceHTTPClientImpl) InsertAnimeItem(ctx context.Context, in *InsertAnimeItemRequest, opts ...http.CallOption) (*InsertAnimeItemResponse, error) {
	var out InsertAnimeItemResponse
	pattern := "/mikanani/v2/anime/insert"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMikananiServiceInsertAnimeItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MikananiServiceHTTPClientImpl) ListAnimeMeta(ctx context.Context, in *ListAnimeMetaRequest, opts ...http.CallOption) (*ListAnimeMetaResponse, error) {
	var out ListAnimeMetaResponse
	pattern := "/mikanani/v2/anime/list-meta"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMikananiServiceListAnimeMeta))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MikananiServiceHTTPClientImpl) UpdateAnimeDoc(ctx context.Context, in *UpdateAnimeDocRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/mikanani/v2/anime/update-doc"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMikananiServiceUpdateAnimeDoc))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MikananiServiceHTTPClientImpl) UpdateAnimeMeta(ctx context.Context, in *UpdateAnimeMetaRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/mikanani/v2/anime/update-meta"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMikananiServiceUpdateAnimeMeta))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
