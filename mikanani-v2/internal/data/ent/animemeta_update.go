// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mikanani-v2/internal/data/ent/animemeta"
	"mikanani-v2/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AnimeMetaUpdate is the builder for updating AnimeMeta entities.
type AnimeMetaUpdate struct {
	config
	hooks    []Hook
	mutation *AnimeMetaMutation
}

// Where appends a list predicates to the AnimeMetaUpdate builder.
func (amu *AnimeMetaUpdate) Where(ps ...predicate.AnimeMeta) *AnimeMetaUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetUID sets the "uid" field.
func (amu *AnimeMetaUpdate) SetUID(i int64) *AnimeMetaUpdate {
	amu.mutation.ResetUID()
	amu.mutation.SetUID(i)
	return amu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (amu *AnimeMetaUpdate) SetNillableUID(i *int64) *AnimeMetaUpdate {
	if i != nil {
		amu.SetUID(*i)
	}
	return amu
}

// AddUID adds i to the "uid" field.
func (amu *AnimeMetaUpdate) AddUID(i int64) *AnimeMetaUpdate {
	amu.mutation.AddUID(i)
	return amu
}

// SetName sets the "name" field.
func (amu *AnimeMetaUpdate) SetName(s string) *AnimeMetaUpdate {
	amu.mutation.SetName(s)
	return amu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amu *AnimeMetaUpdate) SetNillableName(s *string) *AnimeMetaUpdate {
	if s != nil {
		amu.SetName(*s)
	}
	return amu
}

// SetDownloadBitmap sets the "downloadBitmap" field.
func (amu *AnimeMetaUpdate) SetDownloadBitmap(i int64) *AnimeMetaUpdate {
	amu.mutation.ResetDownloadBitmap()
	amu.mutation.SetDownloadBitmap(i)
	return amu
}

// SetNillableDownloadBitmap sets the "downloadBitmap" field if the given value is not nil.
func (amu *AnimeMetaUpdate) SetNillableDownloadBitmap(i *int64) *AnimeMetaUpdate {
	if i != nil {
		amu.SetDownloadBitmap(*i)
	}
	return amu
}

// AddDownloadBitmap adds i to the "downloadBitmap" field.
func (amu *AnimeMetaUpdate) AddDownloadBitmap(i int64) *AnimeMetaUpdate {
	amu.mutation.AddDownloadBitmap(i)
	return amu
}

// SetIsActive sets the "isActive" field.
func (amu *AnimeMetaUpdate) SetIsActive(b bool) *AnimeMetaUpdate {
	amu.mutation.SetIsActive(b)
	return amu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (amu *AnimeMetaUpdate) SetNillableIsActive(b *bool) *AnimeMetaUpdate {
	if b != nil {
		amu.SetIsActive(*b)
	}
	return amu
}

// SetTags sets the "tags" field.
func (amu *AnimeMetaUpdate) SetTags(s []string) *AnimeMetaUpdate {
	amu.mutation.SetTags(s)
	return amu
}

// AppendTags appends s to the "tags" field.
func (amu *AnimeMetaUpdate) AppendTags(s []string) *AnimeMetaUpdate {
	amu.mutation.AppendTags(s)
	return amu
}

// ClearTags clears the value of the "tags" field.
func (amu *AnimeMetaUpdate) ClearTags() *AnimeMetaUpdate {
	amu.mutation.ClearTags()
	return amu
}

// SetCreateTime sets the "createTime" field.
func (amu *AnimeMetaUpdate) SetCreateTime(t time.Time) *AnimeMetaUpdate {
	amu.mutation.SetCreateTime(t)
	return amu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (amu *AnimeMetaUpdate) SetNillableCreateTime(t *time.Time) *AnimeMetaUpdate {
	if t != nil {
		amu.SetCreateTime(*t)
	}
	return amu
}

// SetUpdateTime sets the "updateTime" field.
func (amu *AnimeMetaUpdate) SetUpdateTime(t time.Time) *AnimeMetaUpdate {
	amu.mutation.SetUpdateTime(t)
	return amu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (amu *AnimeMetaUpdate) SetNillableUpdateTime(t *time.Time) *AnimeMetaUpdate {
	if t != nil {
		amu.SetUpdateTime(*t)
	}
	return amu
}

// Mutation returns the AnimeMetaMutation object of the builder.
func (amu *AnimeMetaUpdate) Mutation() *AnimeMetaMutation {
	return amu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AnimeMetaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AnimeMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AnimeMetaUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AnimeMetaUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amu *AnimeMetaUpdate) check() error {
	if v, ok := amu.mutation.Name(); ok {
		if err := animemeta.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnimeMeta.name": %w`, err)}
		}
	}
	return nil
}

func (amu *AnimeMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := amu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(animemeta.Table, animemeta.Columns, sqlgraph.NewFieldSpec(animemeta.FieldID, field.TypeInt))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.UID(); ok {
		_spec.SetField(animemeta.FieldUID, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedUID(); ok {
		_spec.AddField(animemeta.FieldUID, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.Name(); ok {
		_spec.SetField(animemeta.FieldName, field.TypeString, value)
	}
	if value, ok := amu.mutation.DownloadBitmap(); ok {
		_spec.SetField(animemeta.FieldDownloadBitmap, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedDownloadBitmap(); ok {
		_spec.AddField(animemeta.FieldDownloadBitmap, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.IsActive(); ok {
		_spec.SetField(animemeta.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := amu.mutation.Tags(); ok {
		_spec.SetField(animemeta.FieldTags, field.TypeJSON, value)
	}
	if value, ok := amu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, animemeta.FieldTags, value)
		})
	}
	if amu.mutation.TagsCleared() {
		_spec.ClearField(animemeta.FieldTags, field.TypeJSON)
	}
	if value, ok := amu.mutation.CreateTime(); ok {
		_spec.SetField(animemeta.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := amu.mutation.UpdateTime(); ok {
		_spec.SetField(animemeta.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animemeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// AnimeMetaUpdateOne is the builder for updating a single AnimeMeta entity.
type AnimeMetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnimeMetaMutation
}

// SetUID sets the "uid" field.
func (amuo *AnimeMetaUpdateOne) SetUID(i int64) *AnimeMetaUpdateOne {
	amuo.mutation.ResetUID()
	amuo.mutation.SetUID(i)
	return amuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (amuo *AnimeMetaUpdateOne) SetNillableUID(i *int64) *AnimeMetaUpdateOne {
	if i != nil {
		amuo.SetUID(*i)
	}
	return amuo
}

// AddUID adds i to the "uid" field.
func (amuo *AnimeMetaUpdateOne) AddUID(i int64) *AnimeMetaUpdateOne {
	amuo.mutation.AddUID(i)
	return amuo
}

// SetName sets the "name" field.
func (amuo *AnimeMetaUpdateOne) SetName(s string) *AnimeMetaUpdateOne {
	amuo.mutation.SetName(s)
	return amuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amuo *AnimeMetaUpdateOne) SetNillableName(s *string) *AnimeMetaUpdateOne {
	if s != nil {
		amuo.SetName(*s)
	}
	return amuo
}

// SetDownloadBitmap sets the "downloadBitmap" field.
func (amuo *AnimeMetaUpdateOne) SetDownloadBitmap(i int64) *AnimeMetaUpdateOne {
	amuo.mutation.ResetDownloadBitmap()
	amuo.mutation.SetDownloadBitmap(i)
	return amuo
}

// SetNillableDownloadBitmap sets the "downloadBitmap" field if the given value is not nil.
func (amuo *AnimeMetaUpdateOne) SetNillableDownloadBitmap(i *int64) *AnimeMetaUpdateOne {
	if i != nil {
		amuo.SetDownloadBitmap(*i)
	}
	return amuo
}

// AddDownloadBitmap adds i to the "downloadBitmap" field.
func (amuo *AnimeMetaUpdateOne) AddDownloadBitmap(i int64) *AnimeMetaUpdateOne {
	amuo.mutation.AddDownloadBitmap(i)
	return amuo
}

// SetIsActive sets the "isActive" field.
func (amuo *AnimeMetaUpdateOne) SetIsActive(b bool) *AnimeMetaUpdateOne {
	amuo.mutation.SetIsActive(b)
	return amuo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (amuo *AnimeMetaUpdateOne) SetNillableIsActive(b *bool) *AnimeMetaUpdateOne {
	if b != nil {
		amuo.SetIsActive(*b)
	}
	return amuo
}

// SetTags sets the "tags" field.
func (amuo *AnimeMetaUpdateOne) SetTags(s []string) *AnimeMetaUpdateOne {
	amuo.mutation.SetTags(s)
	return amuo
}

// AppendTags appends s to the "tags" field.
func (amuo *AnimeMetaUpdateOne) AppendTags(s []string) *AnimeMetaUpdateOne {
	amuo.mutation.AppendTags(s)
	return amuo
}

// ClearTags clears the value of the "tags" field.
func (amuo *AnimeMetaUpdateOne) ClearTags() *AnimeMetaUpdateOne {
	amuo.mutation.ClearTags()
	return amuo
}

// SetCreateTime sets the "createTime" field.
func (amuo *AnimeMetaUpdateOne) SetCreateTime(t time.Time) *AnimeMetaUpdateOne {
	amuo.mutation.SetCreateTime(t)
	return amuo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (amuo *AnimeMetaUpdateOne) SetNillableCreateTime(t *time.Time) *AnimeMetaUpdateOne {
	if t != nil {
		amuo.SetCreateTime(*t)
	}
	return amuo
}

// SetUpdateTime sets the "updateTime" field.
func (amuo *AnimeMetaUpdateOne) SetUpdateTime(t time.Time) *AnimeMetaUpdateOne {
	amuo.mutation.SetUpdateTime(t)
	return amuo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (amuo *AnimeMetaUpdateOne) SetNillableUpdateTime(t *time.Time) *AnimeMetaUpdateOne {
	if t != nil {
		amuo.SetUpdateTime(*t)
	}
	return amuo
}

// Mutation returns the AnimeMetaMutation object of the builder.
func (amuo *AnimeMetaUpdateOne) Mutation() *AnimeMetaMutation {
	return amuo.mutation
}

// Where appends a list predicates to the AnimeMetaUpdate builder.
func (amuo *AnimeMetaUpdateOne) Where(ps ...predicate.AnimeMeta) *AnimeMetaUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AnimeMetaUpdateOne) Select(field string, fields ...string) *AnimeMetaUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AnimeMeta entity.
func (amuo *AnimeMetaUpdateOne) Save(ctx context.Context) (*AnimeMeta, error) {
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AnimeMetaUpdateOne) SaveX(ctx context.Context) *AnimeMeta {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AnimeMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AnimeMetaUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amuo *AnimeMetaUpdateOne) check() error {
	if v, ok := amuo.mutation.Name(); ok {
		if err := animemeta.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnimeMeta.name": %w`, err)}
		}
	}
	return nil
}

func (amuo *AnimeMetaUpdateOne) sqlSave(ctx context.Context) (_node *AnimeMeta, err error) {
	if err := amuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(animemeta.Table, animemeta.Columns, sqlgraph.NewFieldSpec(animemeta.FieldID, field.TypeInt))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnimeMeta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, animemeta.FieldID)
		for _, f := range fields {
			if !animemeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != animemeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.UID(); ok {
		_spec.SetField(animemeta.FieldUID, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedUID(); ok {
		_spec.AddField(animemeta.FieldUID, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.Name(); ok {
		_spec.SetField(animemeta.FieldName, field.TypeString, value)
	}
	if value, ok := amuo.mutation.DownloadBitmap(); ok {
		_spec.SetField(animemeta.FieldDownloadBitmap, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedDownloadBitmap(); ok {
		_spec.AddField(animemeta.FieldDownloadBitmap, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.IsActive(); ok {
		_spec.SetField(animemeta.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := amuo.mutation.Tags(); ok {
		_spec.SetField(animemeta.FieldTags, field.TypeJSON, value)
	}
	if value, ok := amuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, animemeta.FieldTags, value)
		})
	}
	if amuo.mutation.TagsCleared() {
		_spec.ClearField(animemeta.FieldTags, field.TypeJSON)
	}
	if value, ok := amuo.mutation.CreateTime(); ok {
		_spec.SetField(animemeta.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := amuo.mutation.UpdateTime(); ok {
		_spec.SetField(animemeta.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &AnimeMeta{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animemeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
