// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mikanani-v2/internal/data/ent/animemeta"
	"mikanani-v2/internal/data/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnimeMeta = "AnimeMeta"
)

// AnimeMetaMutation represents an operation that mutates the AnimeMeta nodes in the graph.
type AnimeMetaMutation struct {
	config
	op                Op
	typ               string
	id                *int
	uid               *int64
	adduid            *int64
	name              *string
	downloadBitmap    *int64
	adddownloadBitmap *int64
	isActive          *bool
	tags              *[]string
	appendtags        []string
	episodes          *int64
	addepisodes       *int64
	createTime        *time.Time
	updateTime        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*AnimeMeta, error)
	predicates        []predicate.AnimeMeta
}

var _ ent.Mutation = (*AnimeMetaMutation)(nil)

// animemetaOption allows management of the mutation configuration using functional options.
type animemetaOption func(*AnimeMetaMutation)

// newAnimeMetaMutation creates new mutation for the AnimeMeta entity.
func newAnimeMetaMutation(c config, op Op, opts ...animemetaOption) *AnimeMetaMutation {
	m := &AnimeMetaMutation{
		config:        c,
		op:            op,
		typ:           TypeAnimeMeta,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnimeMetaID sets the ID field of the mutation.
func withAnimeMetaID(id int) animemetaOption {
	return func(m *AnimeMetaMutation) {
		var (
			err   error
			once  sync.Once
			value *AnimeMeta
		)
		m.oldValue = func(ctx context.Context) (*AnimeMeta, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AnimeMeta.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnimeMeta sets the old AnimeMeta of the mutation.
func withAnimeMeta(node *AnimeMeta) animemetaOption {
	return func(m *AnimeMetaMutation) {
		m.oldValue = func(context.Context) (*AnimeMeta, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnimeMetaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnimeMetaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnimeMetaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnimeMetaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AnimeMeta.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUID sets the "uid" field.
func (m *AnimeMetaMutation) SetUID(i int64) {
	m.uid = &i
	m.adduid = nil
}

// UID returns the value of the "uid" field in the mutation.
func (m *AnimeMetaMutation) UID() (r int64, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldUID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// AddUID adds i to the "uid" field.
func (m *AnimeMetaMutation) AddUID(i int64) {
	if m.adduid != nil {
		*m.adduid += i
	} else {
		m.adduid = &i
	}
}

// AddedUID returns the value that was added to the "uid" field in this mutation.
func (m *AnimeMetaMutation) AddedUID() (r int64, exists bool) {
	v := m.adduid
	if v == nil {
		return
	}
	return *v, true
}

// ResetUID resets all changes to the "uid" field.
func (m *AnimeMetaMutation) ResetUID() {
	m.uid = nil
	m.adduid = nil
}

// SetName sets the "name" field.
func (m *AnimeMetaMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AnimeMetaMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AnimeMetaMutation) ResetName() {
	m.name = nil
}

// SetDownloadBitmap sets the "downloadBitmap" field.
func (m *AnimeMetaMutation) SetDownloadBitmap(i int64) {
	m.downloadBitmap = &i
	m.adddownloadBitmap = nil
}

// DownloadBitmap returns the value of the "downloadBitmap" field in the mutation.
func (m *AnimeMetaMutation) DownloadBitmap() (r int64, exists bool) {
	v := m.downloadBitmap
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadBitmap returns the old "downloadBitmap" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldDownloadBitmap(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadBitmap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadBitmap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadBitmap: %w", err)
	}
	return oldValue.DownloadBitmap, nil
}

// AddDownloadBitmap adds i to the "downloadBitmap" field.
func (m *AnimeMetaMutation) AddDownloadBitmap(i int64) {
	if m.adddownloadBitmap != nil {
		*m.adddownloadBitmap += i
	} else {
		m.adddownloadBitmap = &i
	}
}

// AddedDownloadBitmap returns the value that was added to the "downloadBitmap" field in this mutation.
func (m *AnimeMetaMutation) AddedDownloadBitmap() (r int64, exists bool) {
	v := m.adddownloadBitmap
	if v == nil {
		return
	}
	return *v, true
}

// ResetDownloadBitmap resets all changes to the "downloadBitmap" field.
func (m *AnimeMetaMutation) ResetDownloadBitmap() {
	m.downloadBitmap = nil
	m.adddownloadBitmap = nil
}

// SetIsActive sets the "isActive" field.
func (m *AnimeMetaMutation) SetIsActive(b bool) {
	m.isActive = &b
}

// IsActive returns the value of the "isActive" field in the mutation.
func (m *AnimeMetaMutation) IsActive() (r bool, exists bool) {
	v := m.isActive
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "isActive" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "isActive" field.
func (m *AnimeMetaMutation) ResetIsActive() {
	m.isActive = nil
}

// SetTags sets the "tags" field.
func (m *AnimeMetaMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *AnimeMetaMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *AnimeMetaMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *AnimeMetaMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ClearTags clears the value of the "tags" field.
func (m *AnimeMetaMutation) ClearTags() {
	m.tags = nil
	m.appendtags = nil
	m.clearedFields[animemeta.FieldTags] = struct{}{}
}

// TagsCleared returns if the "tags" field was cleared in this mutation.
func (m *AnimeMetaMutation) TagsCleared() bool {
	_, ok := m.clearedFields[animemeta.FieldTags]
	return ok
}

// ResetTags resets all changes to the "tags" field.
func (m *AnimeMetaMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
	delete(m.clearedFields, animemeta.FieldTags)
}

// SetEpisodes sets the "episodes" field.
func (m *AnimeMetaMutation) SetEpisodes(i int64) {
	m.episodes = &i
	m.addepisodes = nil
}

// Episodes returns the value of the "episodes" field in the mutation.
func (m *AnimeMetaMutation) Episodes() (r int64, exists bool) {
	v := m.episodes
	if v == nil {
		return
	}
	return *v, true
}

// OldEpisodes returns the old "episodes" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldEpisodes(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEpisodes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEpisodes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEpisodes: %w", err)
	}
	return oldValue.Episodes, nil
}

// AddEpisodes adds i to the "episodes" field.
func (m *AnimeMetaMutation) AddEpisodes(i int64) {
	if m.addepisodes != nil {
		*m.addepisodes += i
	} else {
		m.addepisodes = &i
	}
}

// AddedEpisodes returns the value that was added to the "episodes" field in this mutation.
func (m *AnimeMetaMutation) AddedEpisodes() (r int64, exists bool) {
	v := m.addepisodes
	if v == nil {
		return
	}
	return *v, true
}

// ResetEpisodes resets all changes to the "episodes" field.
func (m *AnimeMetaMutation) ResetEpisodes() {
	m.episodes = nil
	m.addepisodes = nil
}

// SetCreateTime sets the "createTime" field.
func (m *AnimeMetaMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *AnimeMetaMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *AnimeMetaMutation) ResetCreateTime() {
	m.createTime = nil
}

// SetUpdateTime sets the "updateTime" field.
func (m *AnimeMetaMutation) SetUpdateTime(t time.Time) {
	m.updateTime = &t
}

// UpdateTime returns the value of the "updateTime" field in the mutation.
func (m *AnimeMetaMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.updateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "updateTime" field's value of the AnimeMeta entity.
// If the AnimeMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMetaMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "updateTime" field.
func (m *AnimeMetaMutation) ResetUpdateTime() {
	m.updateTime = nil
}

// Where appends a list predicates to the AnimeMetaMutation builder.
func (m *AnimeMetaMutation) Where(ps ...predicate.AnimeMeta) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AnimeMetaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AnimeMetaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AnimeMeta, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AnimeMetaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AnimeMetaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AnimeMeta).
func (m *AnimeMetaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnimeMetaMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.uid != nil {
		fields = append(fields, animemeta.FieldUID)
	}
	if m.name != nil {
		fields = append(fields, animemeta.FieldName)
	}
	if m.downloadBitmap != nil {
		fields = append(fields, animemeta.FieldDownloadBitmap)
	}
	if m.isActive != nil {
		fields = append(fields, animemeta.FieldIsActive)
	}
	if m.tags != nil {
		fields = append(fields, animemeta.FieldTags)
	}
	if m.episodes != nil {
		fields = append(fields, animemeta.FieldEpisodes)
	}
	if m.createTime != nil {
		fields = append(fields, animemeta.FieldCreateTime)
	}
	if m.updateTime != nil {
		fields = append(fields, animemeta.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnimeMetaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case animemeta.FieldUID:
		return m.UID()
	case animemeta.FieldName:
		return m.Name()
	case animemeta.FieldDownloadBitmap:
		return m.DownloadBitmap()
	case animemeta.FieldIsActive:
		return m.IsActive()
	case animemeta.FieldTags:
		return m.Tags()
	case animemeta.FieldEpisodes:
		return m.Episodes()
	case animemeta.FieldCreateTime:
		return m.CreateTime()
	case animemeta.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnimeMetaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case animemeta.FieldUID:
		return m.OldUID(ctx)
	case animemeta.FieldName:
		return m.OldName(ctx)
	case animemeta.FieldDownloadBitmap:
		return m.OldDownloadBitmap(ctx)
	case animemeta.FieldIsActive:
		return m.OldIsActive(ctx)
	case animemeta.FieldTags:
		return m.OldTags(ctx)
	case animemeta.FieldEpisodes:
		return m.OldEpisodes(ctx)
	case animemeta.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case animemeta.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown AnimeMeta field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnimeMetaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case animemeta.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case animemeta.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case animemeta.FieldDownloadBitmap:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadBitmap(v)
		return nil
	case animemeta.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case animemeta.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case animemeta.FieldEpisodes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEpisodes(v)
		return nil
	case animemeta.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case animemeta.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown AnimeMeta field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnimeMetaMutation) AddedFields() []string {
	var fields []string
	if m.adduid != nil {
		fields = append(fields, animemeta.FieldUID)
	}
	if m.adddownloadBitmap != nil {
		fields = append(fields, animemeta.FieldDownloadBitmap)
	}
	if m.addepisodes != nil {
		fields = append(fields, animemeta.FieldEpisodes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnimeMetaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case animemeta.FieldUID:
		return m.AddedUID()
	case animemeta.FieldDownloadBitmap:
		return m.AddedDownloadBitmap()
	case animemeta.FieldEpisodes:
		return m.AddedEpisodes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnimeMetaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case animemeta.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUID(v)
		return nil
	case animemeta.FieldDownloadBitmap:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDownloadBitmap(v)
		return nil
	case animemeta.FieldEpisodes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEpisodes(v)
		return nil
	}
	return fmt.Errorf("unknown AnimeMeta numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnimeMetaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(animemeta.FieldTags) {
		fields = append(fields, animemeta.FieldTags)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnimeMetaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnimeMetaMutation) ClearField(name string) error {
	switch name {
	case animemeta.FieldTags:
		m.ClearTags()
		return nil
	}
	return fmt.Errorf("unknown AnimeMeta nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnimeMetaMutation) ResetField(name string) error {
	switch name {
	case animemeta.FieldUID:
		m.ResetUID()
		return nil
	case animemeta.FieldName:
		m.ResetName()
		return nil
	case animemeta.FieldDownloadBitmap:
		m.ResetDownloadBitmap()
		return nil
	case animemeta.FieldIsActive:
		m.ResetIsActive()
		return nil
	case animemeta.FieldTags:
		m.ResetTags()
		return nil
	case animemeta.FieldEpisodes:
		m.ResetEpisodes()
		return nil
	case animemeta.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case animemeta.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown AnimeMeta field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnimeMetaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnimeMetaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnimeMetaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnimeMetaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnimeMetaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnimeMetaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnimeMetaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AnimeMeta unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnimeMetaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AnimeMeta edge %s", name)
}
