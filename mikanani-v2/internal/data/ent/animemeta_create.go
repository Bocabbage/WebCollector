// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mikanani-v2/internal/data/ent/animemeta"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnimeMetaCreate is the builder for creating a AnimeMeta entity.
type AnimeMetaCreate struct {
	config
	mutation *AnimeMetaMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (amc *AnimeMetaCreate) SetUID(i int64) *AnimeMetaCreate {
	amc.mutation.SetUID(i)
	return amc
}

// SetName sets the "name" field.
func (amc *AnimeMetaCreate) SetName(s string) *AnimeMetaCreate {
	amc.mutation.SetName(s)
	return amc
}

// SetDownloadBitmap sets the "downloadBitmap" field.
func (amc *AnimeMetaCreate) SetDownloadBitmap(i int64) *AnimeMetaCreate {
	amc.mutation.SetDownloadBitmap(i)
	return amc
}

// SetNillableDownloadBitmap sets the "downloadBitmap" field if the given value is not nil.
func (amc *AnimeMetaCreate) SetNillableDownloadBitmap(i *int64) *AnimeMetaCreate {
	if i != nil {
		amc.SetDownloadBitmap(*i)
	}
	return amc
}

// SetIsActive sets the "isActive" field.
func (amc *AnimeMetaCreate) SetIsActive(b bool) *AnimeMetaCreate {
	amc.mutation.SetIsActive(b)
	return amc
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (amc *AnimeMetaCreate) SetNillableIsActive(b *bool) *AnimeMetaCreate {
	if b != nil {
		amc.SetIsActive(*b)
	}
	return amc
}

// SetTags sets the "tags" field.
func (amc *AnimeMetaCreate) SetTags(s []string) *AnimeMetaCreate {
	amc.mutation.SetTags(s)
	return amc
}

// SetEpisodes sets the "episodes" field.
func (amc *AnimeMetaCreate) SetEpisodes(i int64) *AnimeMetaCreate {
	amc.mutation.SetEpisodes(i)
	return amc
}

// SetNillableEpisodes sets the "episodes" field if the given value is not nil.
func (amc *AnimeMetaCreate) SetNillableEpisodes(i *int64) *AnimeMetaCreate {
	if i != nil {
		amc.SetEpisodes(*i)
	}
	return amc
}

// SetCreateTime sets the "createTime" field.
func (amc *AnimeMetaCreate) SetCreateTime(t time.Time) *AnimeMetaCreate {
	amc.mutation.SetCreateTime(t)
	return amc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (amc *AnimeMetaCreate) SetNillableCreateTime(t *time.Time) *AnimeMetaCreate {
	if t != nil {
		amc.SetCreateTime(*t)
	}
	return amc
}

// SetUpdateTime sets the "updateTime" field.
func (amc *AnimeMetaCreate) SetUpdateTime(t time.Time) *AnimeMetaCreate {
	amc.mutation.SetUpdateTime(t)
	return amc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (amc *AnimeMetaCreate) SetNillableUpdateTime(t *time.Time) *AnimeMetaCreate {
	if t != nil {
		amc.SetUpdateTime(*t)
	}
	return amc
}

// Mutation returns the AnimeMetaMutation object of the builder.
func (amc *AnimeMetaCreate) Mutation() *AnimeMetaMutation {
	return amc.mutation
}

// Save creates the AnimeMeta in the database.
func (amc *AnimeMetaCreate) Save(ctx context.Context) (*AnimeMeta, error) {
	amc.defaults()
	return withHooks(ctx, amc.sqlSave, amc.mutation, amc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AnimeMetaCreate) SaveX(ctx context.Context) *AnimeMeta {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AnimeMetaCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AnimeMetaCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AnimeMetaCreate) defaults() {
	if _, ok := amc.mutation.DownloadBitmap(); !ok {
		v := animemeta.DefaultDownloadBitmap
		amc.mutation.SetDownloadBitmap(v)
	}
	if _, ok := amc.mutation.IsActive(); !ok {
		v := animemeta.DefaultIsActive
		amc.mutation.SetIsActive(v)
	}
	if _, ok := amc.mutation.Episodes(); !ok {
		v := animemeta.DefaultEpisodes
		amc.mutation.SetEpisodes(v)
	}
	if _, ok := amc.mutation.CreateTime(); !ok {
		v := animemeta.DefaultCreateTime()
		amc.mutation.SetCreateTime(v)
	}
	if _, ok := amc.mutation.UpdateTime(); !ok {
		v := animemeta.DefaultUpdateTime()
		amc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AnimeMetaCreate) check() error {
	if _, ok := amc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "AnimeMeta.uid"`)}
	}
	if _, ok := amc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AnimeMeta.name"`)}
	}
	if v, ok := amc.mutation.Name(); ok {
		if err := animemeta.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnimeMeta.name": %w`, err)}
		}
	}
	if _, ok := amc.mutation.DownloadBitmap(); !ok {
		return &ValidationError{Name: "downloadBitmap", err: errors.New(`ent: missing required field "AnimeMeta.downloadBitmap"`)}
	}
	if _, ok := amc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "isActive", err: errors.New(`ent: missing required field "AnimeMeta.isActive"`)}
	}
	if _, ok := amc.mutation.Episodes(); !ok {
		return &ValidationError{Name: "episodes", err: errors.New(`ent: missing required field "AnimeMeta.episodes"`)}
	}
	if v, ok := amc.mutation.Episodes(); ok {
		if err := animemeta.EpisodesValidator(v); err != nil {
			return &ValidationError{Name: "episodes", err: fmt.Errorf(`ent: validator failed for field "AnimeMeta.episodes": %w`, err)}
		}
	}
	if _, ok := amc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`ent: missing required field "AnimeMeta.createTime"`)}
	}
	if _, ok := amc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "updateTime", err: errors.New(`ent: missing required field "AnimeMeta.updateTime"`)}
	}
	return nil
}

func (amc *AnimeMetaCreate) sqlSave(ctx context.Context) (*AnimeMeta, error) {
	if err := amc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	amc.mutation.id = &_node.ID
	amc.mutation.done = true
	return _node, nil
}

func (amc *AnimeMetaCreate) createSpec() (*AnimeMeta, *sqlgraph.CreateSpec) {
	var (
		_node = &AnimeMeta{config: amc.config}
		_spec = sqlgraph.NewCreateSpec(animemeta.Table, sqlgraph.NewFieldSpec(animemeta.FieldID, field.TypeInt))
	)
	if value, ok := amc.mutation.UID(); ok {
		_spec.SetField(animemeta.FieldUID, field.TypeInt64, value)
		_node.UID = value
	}
	if value, ok := amc.mutation.Name(); ok {
		_spec.SetField(animemeta.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := amc.mutation.DownloadBitmap(); ok {
		_spec.SetField(animemeta.FieldDownloadBitmap, field.TypeInt64, value)
		_node.DownloadBitmap = value
	}
	if value, ok := amc.mutation.IsActive(); ok {
		_spec.SetField(animemeta.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := amc.mutation.Tags(); ok {
		_spec.SetField(animemeta.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := amc.mutation.Episodes(); ok {
		_spec.SetField(animemeta.FieldEpisodes, field.TypeInt64, value)
		_node.Episodes = value
	}
	if value, ok := amc.mutation.CreateTime(); ok {
		_spec.SetField(animemeta.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := amc.mutation.UpdateTime(); ok {
		_spec.SetField(animemeta.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AnimeMetaCreateBulk is the builder for creating many AnimeMeta entities in bulk.
type AnimeMetaCreateBulk struct {
	config
	err      error
	builders []*AnimeMetaCreate
}

// Save creates the AnimeMeta entities in the database.
func (amcb *AnimeMetaCreateBulk) Save(ctx context.Context) ([]*AnimeMeta, error) {
	if amcb.err != nil {
		return nil, amcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AnimeMeta, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnimeMetaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AnimeMetaCreateBulk) SaveX(ctx context.Context) []*AnimeMeta {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AnimeMetaCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AnimeMetaCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}
