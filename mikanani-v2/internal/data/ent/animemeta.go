// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"mikanani-v2/internal/data/ent/animemeta"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AnimeMeta is the model entity for the AnimeMeta schema.
type AnimeMeta struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID int64 `json:"uid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DownloadBitmap holds the value of the "downloadBitmap" field.
	DownloadBitmap int64 `json:"downloadBitmap,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime time.Time `json:"createTime,omitempty"`
	// UpdateTime holds the value of the "updateTime" field.
	UpdateTime   time.Time `json:"updateTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnimeMeta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case animemeta.FieldTags:
			values[i] = new([]byte)
		case animemeta.FieldIsActive:
			values[i] = new(sql.NullBool)
		case animemeta.FieldID, animemeta.FieldUID, animemeta.FieldDownloadBitmap:
			values[i] = new(sql.NullInt64)
		case animemeta.FieldName:
			values[i] = new(sql.NullString)
		case animemeta.FieldCreateTime, animemeta.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnimeMeta fields.
func (am *AnimeMeta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case animemeta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int(value.Int64)
		case animemeta.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				am.UID = value.Int64
			}
		case animemeta.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				am.Name = value.String
			}
		case animemeta.FieldDownloadBitmap:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field downloadBitmap", values[i])
			} else if value.Valid {
				am.DownloadBitmap = value.Int64
			}
		case animemeta.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				am.IsActive = value.Bool
			}
		case animemeta.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &am.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case animemeta.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				am.CreateTime = value.Time
			}
		case animemeta.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				am.UpdateTime = value.Time
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AnimeMeta.
// This includes values selected through modifiers, order, etc.
func (am *AnimeMeta) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// Update returns a builder for updating this AnimeMeta.
// Note that you need to call AnimeMeta.Unwrap() before calling this method if this AnimeMeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AnimeMeta) Update() *AnimeMetaUpdateOne {
	return NewAnimeMetaClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AnimeMeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AnimeMeta) Unwrap() *AnimeMeta {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnimeMeta is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AnimeMeta) String() string {
	var builder strings.Builder
	builder.WriteString("AnimeMeta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", am.UID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(am.Name)
	builder.WriteString(", ")
	builder.WriteString("downloadBitmap=")
	builder.WriteString(fmt.Sprintf("%v", am.DownloadBitmap))
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", am.IsActive))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", am.Tags))
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(am.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(am.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AnimeMetaSlice is a parsable slice of AnimeMeta.
type AnimeMetaSlice []*AnimeMeta
