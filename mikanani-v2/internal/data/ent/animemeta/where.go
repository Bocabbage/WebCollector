// Code generated by ent, DO NOT EDIT.

package animemeta

import (
	"mikanani-v2/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldUID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldName, v))
}

// DownloadBitmap applies equality check predicate on the "downloadBitmap" field. It's identical to DownloadBitmapEQ.
func DownloadBitmap(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldDownloadBitmap, v))
}

// IsActive applies equality check predicate on the "isActive" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldIsActive, v))
}

// Episodes applies equality check predicate on the "episodes" field. It's identical to EpisodesEQ.
func Episodes(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldEpisodes, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldUpdateTime, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLTE(FieldUID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldContainsFold(FieldName, v))
}

// DownloadBitmapEQ applies the EQ predicate on the "downloadBitmap" field.
func DownloadBitmapEQ(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldDownloadBitmap, v))
}

// DownloadBitmapNEQ applies the NEQ predicate on the "downloadBitmap" field.
func DownloadBitmapNEQ(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldDownloadBitmap, v))
}

// DownloadBitmapIn applies the In predicate on the "downloadBitmap" field.
func DownloadBitmapIn(vs ...int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIn(FieldDownloadBitmap, vs...))
}

// DownloadBitmapNotIn applies the NotIn predicate on the "downloadBitmap" field.
func DownloadBitmapNotIn(vs ...int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotIn(FieldDownloadBitmap, vs...))
}

// DownloadBitmapGT applies the GT predicate on the "downloadBitmap" field.
func DownloadBitmapGT(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGT(FieldDownloadBitmap, v))
}

// DownloadBitmapGTE applies the GTE predicate on the "downloadBitmap" field.
func DownloadBitmapGTE(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGTE(FieldDownloadBitmap, v))
}

// DownloadBitmapLT applies the LT predicate on the "downloadBitmap" field.
func DownloadBitmapLT(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLT(FieldDownloadBitmap, v))
}

// DownloadBitmapLTE applies the LTE predicate on the "downloadBitmap" field.
func DownloadBitmapLTE(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLTE(FieldDownloadBitmap, v))
}

// IsActiveEQ applies the EQ predicate on the "isActive" field.
func IsActiveEQ(v bool) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "isActive" field.
func IsActiveNEQ(v bool) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldIsActive, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotNull(FieldTags))
}

// EpisodesEQ applies the EQ predicate on the "episodes" field.
func EpisodesEQ(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldEpisodes, v))
}

// EpisodesNEQ applies the NEQ predicate on the "episodes" field.
func EpisodesNEQ(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldEpisodes, v))
}

// EpisodesIn applies the In predicate on the "episodes" field.
func EpisodesIn(vs ...int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIn(FieldEpisodes, vs...))
}

// EpisodesNotIn applies the NotIn predicate on the "episodes" field.
func EpisodesNotIn(vs ...int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotIn(FieldEpisodes, vs...))
}

// EpisodesGT applies the GT predicate on the "episodes" field.
func EpisodesGT(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGT(FieldEpisodes, v))
}

// EpisodesGTE applies the GTE predicate on the "episodes" field.
func EpisodesGTE(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGTE(FieldEpisodes, v))
}

// EpisodesLT applies the LT predicate on the "episodes" field.
func EpisodesLT(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLT(FieldEpisodes, v))
}

// EpisodesLTE applies the LTE predicate on the "episodes" field.
func EpisodesLTE(v int64) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLTE(FieldEpisodes, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AnimeMeta) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AnimeMeta) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AnimeMeta) predicate.AnimeMeta {
	return predicate.AnimeMeta(sql.NotPredicates(p))
}
